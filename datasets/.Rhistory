library(gdata)
library(gdata)
library(gdata)
install.packages(gdata)
help("install.packages")
install.packages("gdata")
install.packages("gdata")
install.packages("XLConnect")
install.packages("foreign")
getwd()
library(gdata)
CbC = read.csv("CbC_Rohdaten_5.csv")
CbC = read.csv("CbC_Rohdaten_5.csv")
CbC = read.csv("CbC_Rohdaten_5.csv")
CbC = read.csv("CbC_Rohdaten_5.csv")
my_data <- read.csv("CbC_Rohdaten_5.csv", sep=";")
my_data
install.packages("dplyr")
install.packages("ggplot2")
install.packages("e1071")
install.packages("rpart")
install.packages("igraph")
library("nnet", lib.loc="C:/Program Files/Microsoft/MRO/R-3.2.3/library")
install.packages("nnet")
install.packages(dplyr)
install.packages("dplyr")
install.packages("Quandl")
install.packages("devtools")
library(devtools)
install.packages("Rtools")
library(Quandl)
Quandl.api_key("MGe_MUEiBmwwMo7eSsVB")
mydata <- Quandl("ECB/RDF_Q_DE_EUR_4F_CR_DCGDPG_RO", api_key="MGe_MUEiBmwwMo7eSsVB")
print(mydata)
library(ggplot2)
library(dplyr)
data(mydata)
ggplot(mydata)
mydata
ggplot(data=mydata, aes(x=Date, y=Percent))
qplot(x=Date, y=Percent, data=mydata)
employment <- Quandl("FRED/DEUEMPT", api_key="MGe_MUEiBmwwMo7eSsVB")
print(employment)
qplot(x=date, y=value, data=employment)
qplot(x=Date, y=Value, data=employment)
qplot(x=Date, y=Value, geom="density", data=employment)
qplot(x=Date, y=Value, data=employment)
qplot(x=Date, y=Value, geom=smooth, data=employment)
qplot(x=Date, y=Value, geom=c("smooth"), data=employment)
qplot(x=Date, y=Value, geom=c("point"), data=employment)
qplot(x=Date, y=Value, geom=c("point", "smooth"), data=employment)
currency <- Quandl("ECB/ESA_Q_DE_N_1000_COMEMP_0000_YD_D_V_N_A", api_key="MGe_MUEiBmwwMo7eSsVB")
print(currency)
qplot(x=Date, y=National currency, geom=c("point", "smooth"), data=currency)
qplot(x=Date, y="National currency", geom=c("point", "smooth"), data=currency)
qplot(x=Date, y="National currency", data=currency)
qplot(x=Date, y='National currency', data=currency)
names(currency)[2] <- "currency"
currency
qplot(x=Date, y=currency, geom=c("point", "smooth"), data=currency)
population <- Quandl("PENN/GER_POP", api_key="MGe_MUEiBmwwMo7eSsVB")
population
names(population)[2] <- "einwohner"
population
thingy <- merge(employment, population, by="Date")
thingy
employment
nchar(employment.Date)
nchar(employment)
View(population)
View(employment)
View(population)
bigmac_usa <- Quandl("ECONOMIST/BIGMAC_USA", api_key="MGe_MUEiBmwwMo7eSsVB")
bigmac_eur <- Quandl("ECONOMIST/BIGMAC_EUR", api_key="MGe_MUEiBmwwMo7eSsVB")
bigmac_nor <- Quandl("ECONOMIST/BIGMAC_NOR", api_key="MGe_MUEiBmwwMo7eSsVB")
bigmac_che <- Quandl("ECONOMIST/BIGMAC_CHE", api_key="MGe_MUEiBmwwMo7eSsVB")
bigmac_deu <- Quandl("ECONOMIST/BIGMAC_DEU", api_key="MGe_MUEiBmwwMo7eSsVB")
bigmac_usa
qplot(x=date, y=local_price, data=bigmac_usa, geom=c("point", "smooth"))
qplot(x=Date, y=local_price, data=bigmac_usa, geom=c("point", "smooth"))
qplot(x=Date, y=dollar_price, data=bigmac_usa, geom=c("point", "smooth"))
qplot(x=Date, y=dollar_price, data=c("bigmac_usa", "bigmac_deu"), geom=c("point", "smooth"))
qplot(x=Date, y=dollar_price, data=bigmac_deu, geom=c("point", "smooth"))
qplot(x=Date, y=dollar_price, data=c("bigmac_usa", "bigmac_deu"), geom=c("point", "smooth"))
qplot(x=Date, y=dollar_price, data=bigmac_usa, geom=c("point", "smooth"))
qplot(x=Date, y=dollar_price, data=bigmac_che, geom=c("point", "smooth"))
qplot(x=Date, y=dollar_price, data=bigmac_nor, geom=c("point", "smooth"))
install.package("timeSeries")
install.packages("timeSeries")
brk <- Quandl("WIKI/BRK_A", api_key="MGe_MUEiBmwwMo7eSsVB")
brk
View(brk)
qplot(x=Date, y=High, geom=c("point", "smooth"))
qplot(data=brk, x=Date, y=High, geom=c("point", "smooth"))
qplot(data=brk, x=Date, y=High, geom=c("point", "smooth"))
qplot(data=brk, x=Date, y=Close, geom=c("point", "smooth"))
save.image("C:/Users/rnelson020/Desktop/R Learning/20160218 - Fiddling 1 (bigmac, brk, germany).RData")
rm(list=ls())
source('C:/Users/rnelson020/Desktop/Datasets/Revolution R Intro.R', echo=TRUE)
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages(
lib  = lib <- .libPaths()[1],
pkgs = as.data.frame(installed.packages(lib), stringsAsFactors=FALSE)$Package,
type = 'source'
)
install.packages("installr")
install.packages("updateR")
load(installR)
load(installr)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(maps)
data("world.cities")
install.packages("devtools")
library(devtools)
install.packages("Rtools")
mtcars
qplot(data=mtcars, x=hp, y=qsec, color=cyl)
library(ggplot2)
qplot(data=mtcars, x=hp, y=qsec, color=cyl)
source('C:/Users/rnelson020/Desktop/Datasets/Revolution R Intro.R', echo=TRUE)
## Example 1
x <- runif(1000, 0, 2*pi)
y <- rnorm(1000, mean=0, sd=0.2)
z <- sin(x)+y
plot(x,z)
## Making a neural net from the data above
df <- data.frame(x,z)
head(df)
library(nnet)
n <- nnet(z~x,data=df, size=60, linout=TRUE)
## Describe n as built by nnet
str(n)
## What is Machine Learning?
## Asymmetric, building model from examples, then score and classify
## Classification is assigning values to clusters
## (e.g., k-nearest neighbor)
## Demo graph using ----- mclust ----- library
## After classification, SCORING
## Printing a tracker following the x value
## The more neural nodes, the closer it would follow the sin curve
## Display the plot from nnet applied to the random numbers
points(x,n$fitted.values,col="green")
## l1 mor einfo
l1 <- lm(z~x,data=df)
points(x,l1$fitted.values,col="pink")
## Shows tracking to fifth polynomial degree of x
l5 <- lm(z~poly(x,degree=5),data=df)
points(x,l5$fitted.values,col="blue")
## Describes l5
l5
## Running a Random Forest
library(randomForest)
rf <- randomForest(z~x,data=df)
str(rf)
points(x,rf$predicted,col="red")
## Madly overfitted, thanks to the beauty of random forests sticking to predicted values on an obvious curve
## Random fitting is a good way to handle breaks like years; otherwise not super useful
## First experience with Big Data (PPT slide)
# Definition of the problem
# What data is needed
# What data is available
# Data extraction and transformation
# Data quality
## YES: THIS IS EXACTLY THE POINT, AND EXACTLY WHAT'S IMPORTANT
## Clear everything
rm(list=ls())
## Datasets to play with
# http://www.inside-r.org/howto/finding-data-internet
# http://packages.revolutionanalytics.com/datasets/
# http://blog.revolutionanalytics.com/2013/08/big-data-sets-for-r.html
# http://packages.revolutionanalytics.com/datasets/AirOnTime87to12/AirOnTime87to12.xdf
## Microsoft Revolution R and Hadoop (HDFS)
# ScaleR handles breakout to Linux, HDFS, SQL, whatever
# R code remains unchanged, and options are introduced/modified through the Revolution librares and options
## Playing with IRIS
qplot(data=mtcars, x=hp, y=qsec, color=cyl))
big <- runif(10000000, 0, 3000000*pi)
head(big)
str(big)
min(big)
big <- runif(10000000000, -100000, 3000000000000)
big <- runif(1000000000, -100000, 3000000000000)
min(big)
max(big)
head(big)
plot(big)
rm(big)
big <- runif(100000, -100000, 3000000000000)
gc()
gc()
gc()
gc()
plot(big)
min(big)
max(big)
big <- runif(100000, -100000, 3000000000000)
min(big)
big <- runif(100000, -100000, 30000000)
big <- runif(100000, -100000, 30000000)
min(big)
plot(big)
rm(list=ls())
gc()
library(ggplot2)
iris3
plot(iris)
plot(iris3)
plot(iris)
plot(iris3)
sr(iris3)
str(iris3)
str(iris)
qplot(data=iris, x=Petal.Length, y=Petal.Width, color=Species)
qplot(data=iris, x=Sepa.Width, y=Petal.Width, color=Species)
qplot(data=iris, x=Sepal.Width, y=Petal.Width, color=Species)
qplot(data=iris, x=Sepal.Length, y=Petal.Length, color=Species)
WorldPhones
plot(WorldPhones)
str(WorldPhones)
hist(WorldPhones)
LakeHuron
str(LakeHuron)
plot(LakeHuron)
str(morley)
plot(morley)
str(ToothGrowth)
plot(ToothGrowth)
library(ggplot2)
qplot(data=ToothGrowth, x=dose, y=len, color=supp)
ToothGrowth$supp <- factor(ToothGrowth$supp, levels("OJ","VC"), labels=c("OJ", "VC"))
ToothGrowth$supp <- factor(ToothGrowth$supp, levels=c("OJ","VC"), labels=c("OJ", "VC"))
qplot(data=ToothGrowth, x=dose, y=len, color=supp)
qplot(data=ToothGrowth, x=dose, y=len, color=supp, geom=c("point", "line"))
mtcars
mtcars$cyl <- factor(mtcars$cyl, levels=c("4","6","8"), labels=c("4-cylinder", "6-cylinder", "8-cylinder"))
qplot(data=mtcars, x=cyl, y=mpg, color=cyl, geom=c("point", "line"))
qplot(data=mtcars, x=mpg, y=cyl, color=cyl, geom=c("point", "line"))
qplot(data=mtcars, x=cyl, y=mpg, color=cyl, geom=c("point", "line"))
qplot(data=mtcars, x=cy, y=mpg, color=cyl, geom=c("point", "line"))
qplot(data=mtcars, x=disp, y=mpg, color=cyl, geom=c("point", "line"))
qplot(data=mtcars, x=disp, y=mpg, color=cyl
)
)
qplot(data=mtcars, x=disp, y=mpg, color=cyl, geom=c("point", "smooth"))
qplot(data=mtcars, x=disp, y=mpg, color=cyl, geom=c("point", "smooth"), method="lm")
# create factors with value labels
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# Separate regressions of mpg on weight for each number of cylinders
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"),
method="lm", formula=y~x, color=cyl,
main="Regression of MPG on Weight",
xlab="Weight", ylab="Miles per Gallon")
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"),
method="lm", formula=y~x, color=cyl,
main="Regression of MPG on Weight",
xlab="Weight", ylab="Miles per Gallon")
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"),
color=cyl,
main="Regression of MPG on Weight",
xlab="Weight", ylab="Miles per Gallon")
# create factors with value labels
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
qplot(data=mtcars, x=disp, y=mpg, color=cyl, geom=c("point", "smooth"), method="lm")
qplot(data=mtcars, x=disp, y=mpg, color=cyl, geom=c("point", "smooth"))
rm(list=ls())
gc()
str(ability.cov)
plot(ability.cov)
head(ability.cov)
str(occupationalStatus)
head(occupationalStatus)
plot(occupationalStatus)
ANOVA(occupationalStatus)
anova(occupationalStatus)
get(wd)
getwd
getwd()
## Playing with IRIS
# getwd()
Iris <- read.csv2("iris.csv")
library(ggplot2)
qplot(data=Iris, x=Sepal_length, y=Petal_length, color=Species)
install.packages(
lib  = lib <- .libPaths()[1],
pkgs = as.data.frame(installed.packages(lib), stringsAsFactors=FALSE)$Package,
type = 'source'
)
install.packages("tm")
install.packages("Rgraphviz")
install.packages("dplyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("rgl")
install.packages("dygraphs")
install.packages("diagrammeR")
install.packages("DiagrammeR")
install.packages("ggmap")
install.packages("zoo" "xts")
install.packages("zoo", "xts")
install.packages("zoo")
install.packages("xts")
install.packages("quantmod")
install.packages("roxygen2")
swirl()
install.packages("swirl")
swirl()
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("R Programming")
install.packages("rmarkdown", type = "source")
devtools::install_github("yihui/knitr")
install.packages("rtools")
library(rmarkdown)
output: github_document
install.packages("knitr")
install.packages("knitr")
library(rmarkdown)
library(knitr)
output: html_document
library(leaflet)
install.packages("OpenStreetMap")
library(OpenStreetMap)
library(ggplot2)
library(maps)
mp <- openmap(c(49.3935661315918, 8.566250801086426), 4, 'bing')
library(dplyr)
library(tidyr)
utils::View(Iris)
getwd()
setwd("C:/Users/rnelson020/Documents/GitHub/introduction-statistical-learning/datasets/")
list.files()
Advertising <- read.csv(file="Advertising.csv")
utils::View(Advertising)
head(Advertising)
dplyr::glimpse(Advertising)
dplyr::rename(Advertising, X = ID)
dplyr::rename(Advertising, X = "ID")
dplyr::rename(Advertising, X = ID)
Advertising
dplyr::rename(Advertising, ID = X)
utils::View(Advertising)
dplyr::filter(Advertising, TV > 130)
dplyr::filter(Advertising, TV > 150)
tv_nuts <- dplyr::filter(Advertising, TV > 150)
tv_nuts
library(ggplot2)
qplot(data=Advertising, x=TV, Y=Radio)
qplot(data=Advertising, x = TV, Y = Radio)
qplot(data=Advertising, x = TV)
qplot(data=tv_nuts, x = TV)
qplot(data=Advertising, x = TV)
qplot(data=tv_nuts, x = TV)
qplot(data=Advertising, x = TV)
list.files()
install.packages("ISLR")
install.packages("MASS")
library(ISLR)
library(MASS)
Income
?ISLR
??ISLR
utils::View(Advertising)
utils::View(Advertising)  ##  Looking at table
qplot(data = Advertising, x = TV, y = Sales, geom=c("points", "smooth"))
qplot(data = Advertising, x = TV, y = Sales, geom=c("point", "smooth"))
utils::View(Advertising)
qplot(data = Advertising, x = Radio, y = Sales, geom=c("point", "smooth"))
qplot(data = Advertising, x = News, y = Sales, geom=c("point", "smooth"))
utils::View(Advertising)
qplot(data = Advertising, x = Newspaper, y = Sales, geom=c("point", "smooth"))
qplot(data = Advertising, x = Radio, y = Sales, geom=c("point", "smooth"))
qplot(data = Advertising, x = TV, y = Sales, geom=c("point", "smooth"))
lm(TV~Sales, data=Advertising)
tv_lm <- lm(TV~Sales, data=Advertising)
summary(tv_lm)
lm_radio <- lm(Radio ~ Sales, data = Advertising)
lm_tv <- lm(TV ~ Sales, data = Advertising)
lm_tv <- lm(TV ~ Sales, data = Advertising)
lm_newspaper <- lm(Newspaper ~ Sales, data = Advertising)
qplot(data = Advertising, x = Radio, y = Sales, geom=c("point", "smooth"))
summary(lm_radio)
summary(lm_tv)
Income <- read.csv("Income1.csv")
utils::View(Income)
utils::View(Income)
utils::View(Income)
qplot(data = Income, x = Education, y = Income)
qplot(data = Income, x = Education, y = Income, geom=c("point", "smooth"))
lm_income <- lm(Income ~ Education, data = Income)
summary(lm_income)
qplot(data = Income, x = Education, y = Income, geom=c("point", "errorbars"))
qplot(data = Income, x = Education, y = Income, geom=c("point", "errorbar"))
qplot(data = Income, x = Education, y = Income, geom=c("point", "ymin", "ymax", "errorbar"))
qplot(data = Income, x = Education, y = Income, geom=c("point", "smooth
"))"
))
)
qplot(data = Income, x = Education, y = Income, geom=c("point", "smooth"))
qplot(data = Income, x = Education, y = Income, geom=c("point", "smooth"))
Income2 <- read.csv("Income2.csv")
str(Income2)
str(Income)
Income <- read.csv("Income2.csv")  ##  Income1.csv lacks Seniority
utils::View(Income)
qplot(data = Income, x = Education, y = Income, geom=c("point", "smooth"))
qplot(data = Income, x = Education, y = Income, z = Seniority, geom=c("point", "smooth"))
qplot(data = Income, x = Education, y = Income, z = Seniority)
qplot(data = Income, x = Education, y = Income, geom = c("point", "smooth"))
lm_education <- lm(Income ~ Education, data = Income)
lm_seniority <- lm(Income ~ Seniority, data = Income)
summary(lm_seniority)
